{*R_GetMenuIndex
~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetMenuIndex(Option: String; Options: TStringArray): Integer;

Returns Menu index of giveen option.

.. note::

  by Frement

*}
function R_GetMenuIndex(Option: String; Options: TStringArray): Integer;
var
  I: Integer;
begin
  Result := -1;
  for I := 0 to High(Options) do begin
    if (Pos(Option, Options[I]) > 0) then begin
      Result := I;
      Exit;
    end;
  end;
end;

{*R_IsMenuOpen
~~~~~~~~~~~~

.. code-block:: pascal

    function R_IsMenuOpen: Boolean;

Returns true if menu is open.

.. note::

  by Frement

*}
function R_IsMenuOpen: Boolean;
begin
  Result := SmartGetFieldBoolean(SmartCurrentTarget, 0, client_isMenuOpen);
end;

{*R_GetMenuOptions
~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetMenuOptions: TStringArray;

Returns array of menu options.

.. note::

  by Frement

*}
function R_GetMenuOptions: TStringArray;
var
  ActInt, OptInt, Count, I, J: Integer;
  Act, Opt: String;
begin
  Count := SmartGetFieldInt(SmartCurrentTarget, 0, client_menuCount) * client_menuCount_Multiplier;
  SetLength(Result, Count);
  for I := Count - 1 downto 0 do begin
    Act := '';
    Opt := '';
    ActInt := SmartGetFieldArrayObject(SmartCurrentTarget, 0, client_menuActions, I);
    OptInt := SmartGetFieldArrayObject(SmartCurrentTarget, 0, client_menuOptions, I);
    Act := Trim(R_GetJavaString(ActInt, 512));
    Opt := RemoveFormatting(Trim(R_GetJavaString(OptInt, 512)));
    Result[J] := Trim(Act + ' ' + Opt);
    Inc(J);
    SmartFreeObject(SmartCurrentTarget, ActInt);
    SmartFreeObject(SmartCurrentTarget, OptInt);
  end;
end;

{*R_OptionExists
~~~~~~~~~~~~

.. code-block:: pascal

    function R_OptionExists(Option: String): Boolean;

Checks if an option exists, without opening the menu.

.. note::

  by Frement

*}
function R_OptionExists(Option: String): Boolean;
begin
  Result := (R_GetMenuIndex(Option, R_GetMenuOptions) <> -1);
end;

{*R_ChooseOption
~~~~~~~~~~~~

.. code-block:: pascal

    function R_ChooseOption(Option: String): Boolean;

Clicks on given option in open menu

.. note::

  by Frement

*}

function R_ChooseOption(Option: String): Boolean;
var
  Index, MenuX, MenuY, MenuWidth, XOff, YOff: Integer;
  Options: TStringArray;
  Left: Boolean;
begin
  Options := R_GetMenuOptions;
  if (not R_IsMenuOpen) then
    Exit;
  Index := R_GetMenuIndex(Option, Options);
  MenuX := SmartGetFieldInt(SmartCurrentTarget, 0, client_menuX) * client_menuX_Multiplier + 4;
  MenuY := SmartGetFieldInt(SmartCurrentTarget, 0, client_menuY) * client_menuY_Multiplier + 4;
  MenuWidth := SmartGetFieldInt(SmartCurrentTarget, 0, client_menuWidth) * client_menuWidth_Multiplier;
  XOff := RandomRange(4, MenuWidth - 4);
  YOff := RandomRange(20, 25) + (Index * 15);
  if (MenuX + (MenuWidth div 2) > 765) then
  begin
    Left := True;
  end;
  if (MenuX - (MenuWidth div 2) < 0) then
  begin
    Left := False;
  end;
  if (Index = -1) then
  begin
    GetMousePos(MenuX, MenuY);
    if (Left) then
      MMouse(MenuX - 30 - MenuWidth + Random(10), MenuY + RandomRange(-2, 2), 2, 2)
    else
      MMouse(MenuX + 30 + MenuWidth + Random(10), MenuY + RandomRange(-2, 2), 2, 2);
    Exit;
  end;
  MMouse(MenuX + XOff, MenuY + YOff, 2, 2);
  Sleep(RandomRange(100, 250));
  ClickMouse2(Mouse_Left);
  Result := True;
end;

{*R_WaitChooseOption
~~~~~~~~~~~~

.. code-block:: pascal

    function R_WaitChooseOption(Option: String; Time: Integer): Boolean;

Waits until option is found and clicks it.

.. note::

  by Frement

*}
function R_WaitChooseOption(Option: String; Time: Integer): Boolean;
var
  T: Integer;
begin
  Result := False;
  T := GetSystemTime + Time;
  while (GetSystemTime < T) do
  begin
    if (R_IsMenuOpen) then
    begin
      R_ChooseOption(Option);
      Result := True;
      Exit;
    end;
    Wait(20 + Random(20));
  end;
end;

{*R_GetUpText
~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetUpText: String;

Returns uptext

.. note::

  by Frement

*}
function R_GetUpText: String;
var
  Options: TStringArray;
begin
  Options := R_GetMenuOptions;
  if ((High(Options) - 1) > 0) then
    Result := Options[0] + ' / ' + ToStr(High(Options) - 1) + ' more options'
  else
    Result := Options[0];
  if (Result = 'Cancel') then
    Result := '';
end;

(*
R_IsUpTextMulti
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_IsUpTextMulti(UpText: TStringArray): Boolean;

Returns true if any instance of the UpText is found.

.. note::

  by Drags111

*)
function R_IsUpTextMulti(UpText: TStringArray): Boolean;
var
  I, T: integer;
  UT: String;
begin
  Result := False;
  MarkTime(T);
  while(UT = '')do
  begin
    UT := R_GetUpText;
    if(TimeFromMark(T) > 1000)then
      Exit;
    Wait(50+Random(50));
  end;
  for I := 0 to High(UpText) do
  begin
    Result := Pos(Trim(UpText[I]), UT) > 0;
    if Result then Exit;
  end;
end;

(*
R_IsUpText
~~~~~~~~~~

.. code-block:: pascal

    function R_IsUpText(UpText: string): Boolean;

Description: Returns true if UpText is found.

.. note::

  by Drags111

*)
function R_IsUpText(UpText: string): Boolean;
begin
  Result := R_IsUpTextMulti([UpText]);
end;

(*
R_WaitUpTextMulti
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_WaitUpTextMulti(S: TStringArray; Time: Integer): Boolean;

Waits for an uptext in the UpText array.

.. note::

  by Naike

*)
function R_WaitUpTextMulti(S: TStringArray; Time: Integer): Boolean;
var
  T: Integer;
begin
  Result := False;
  T := GetSystemTime + Time;
  while (GetSystemTime < T) do
  begin
    if R_IsUpTextMulti(S) then
    begin
      Result := True;
      Exit;
    end;
    Wait(20 + Random(10));
  end;
end;

(*
R_WaitUpText
~~~~~~~~~~~~

.. code-block:: pascal

    function R_WaitUpText(S: String; Time: Integer): Boolean;

Waits for the UpText

.. note::

  by Naike

*)
function R_WaitUpText(S: String; Time: Integer): Boolean;
begin
  Result := R_WaitUpTextMulti([S], Time);
end;
